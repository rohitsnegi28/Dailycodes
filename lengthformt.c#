using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Formatting;
using System;
using System.IO;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        // Specify the root directory of your project
        string directoryPath = @"C:\YourProjectDirectory"; // Replace with your project directory

        // Iterate over all .cs files in the directory and subdirectories
        foreach (var file in Directory.GetFiles(directoryPath, "*.cs", SearchOption.AllDirectories))
        {
            Console.WriteLine($"Processing: {file}");
            
            // Read the contents of the file
            string code = File.ReadAllText(file);

            // Parse the file into a syntax tree
            var tree = CSharpSyntaxTree.ParseText(code);
            var root = tree.GetRoot();

            // Split the file into lines to check for long lines
            var lines = code.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

            // Skip files that do not have any lines exceeding 200 characters
            if (lines.All(line => line.Length <= 200))
            {
                Console.WriteLine($"No long lines found in: {file}");
                continue; // Skip to the next file
            }

            // Use the custom rewriter to modify long lines
            var newRoot = (CompilationUnitSyntax)new LongLineRewriter(200).Visit(root);

            // Format the updated syntax tree
            var workspace = new AdhocWorkspace();
            var formattedCode = Formatter.Format(newRoot, workspace).ToFullString();

            // Write the formatted code back to the file
            File.WriteAllText(file, formattedCode);
            Console.WriteLine($"Updated: {file}");
        }
    }
}

// Custom SyntaxRewriter to modify long lines safely
class LongLineRewriter : CSharpSyntaxRewriter
{
    private readonly int _maxLength;

    // Constructor to initialize the maximum line length
    public LongLineRewriter(int maxLength)
    {
        _maxLength = maxLength;
    }

    public override SyntaxNode Visit(SyntaxNode node)
    {
        if (node == null)
            return null; // Return null for null nodes (no changes)

        // Get the line span and text of the current node
        var textSpan = node.GetLocation().GetLineSpan();
        var lineText = node.ToString();

        // If the line exceeds the max length, wrap it
        if (lineText.Length > _maxLength)
        {
            // Wrap the long line into smaller chunks
            string[] wrappedLines = WrapLine(lineText, _maxLength);
            string wrappedCode = string.Join(Environment.NewLine, wrappedLines);

            // Parse the wrapped code and return it as a new syntax node
            return SyntaxFactory.ParseSyntaxTree(wrappedCode).GetRoot();
        }

        // For nodes within the max length, return as-is
        return base.Visit(node);
    }

    // Helper method to wrap a long line into smaller chunks
    private string[] WrapLine(string line, int maxLength)
    {
        // Break the line into chunks of the specified maximum length
        var chunks = Enumerable.Range(0, (line.Length + maxLength - 1) / maxLength)
                               .Select(i => line.Substring(i * maxLength, Math.Min(maxLength, line.Length - i * maxLength)))
                               .ToArray();

        // Indent wrapped lines to preserve readability (basic implementation)
        return chunks.Select((chunk, index) => index == 0 ? chunk : "    " + chunk.TrimStart()).ToArray();
    }
}